// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package hashicorp.waypoint_hzn;

option go_package = "pb";

import "google/protobuf/empty.proto";
import "defs/validate.proto";

// WaypointHzn is the gRPC service frontend for the more private direct
// Horizon API. This exposes higher level operations that Waypoint uses
// to register URLs with Horizon.
service WaypointHzn {
  rpc RegisterGuestAccount(RegisterGuestAccountRequest) returns (RegisterGuestAccountResponse);
  rpc RegisterHostname(RegisterHostnameRequest) returns (RegisterHostnameResponse);
  rpc ListHostnames(ListHostnamesRequest) returns (ListHostnamesResponse);
  rpc DeleteHostname(DeleteHostnameRequest) returns (google.protobuf.Empty);
}

/********************************************************************
* Shared Messages
********************************************************************/

message Label {
  string name = 1;
  string value = 2;
}

message LabelSet {
  repeated Label labels = 1 [(validate.rules).repeated.min_items = 1];
}

/********************************************************************
* Account RPCs
********************************************************************/

message RegisterGuestAccountRequest {
  // server ID is the unique ULID of the Waypoint server requesting a
  // guest account. If this server already has a guest account registered,
  // the same token will be returned.
  string server_id = 1;

  // Indicates that the user accepted the TOS to access Horizon
  bool accept_tos = 2;
}

message RegisterGuestAccountResponse {
  // API token to use for protected endpoints.
  string token = 1;
}

/********************************************************************
* Hostname RPCs
********************************************************************/

message RegisterHostnameRequest {
  // hostname to register
  oneof hostname {
    option (validate.required) = true;

    // auto-generate a hostname
    google.protobuf.Empty generate = 1;

    // specific hostname request
    string exact = 2 [(validate.rules).string = {
       min_len: 3,
       pattern: "\\w+[\\w\\d-]*",
       not_in: ["admin", "api", "blog", "hzn", "horizon", "waypoint"],
    }];
  }

  // labels to link this hostname to.
  LabelSet labels = 3 [(validate.rules).message.required = true];
}

message RegisterHostnameResponse {
  string hostname = 1;
  string fqdn = 2;
}

message ListHostnamesRequest {}

message ListHostnamesResponse {
  repeated Hostname hostnames = 1;

  message Hostname {
    string hostname = 1;
    string fqdn = 2;
    LabelSet labels = 3;
  }
}

message DeleteHostnameRequest {
  string hostname = 1;
}
