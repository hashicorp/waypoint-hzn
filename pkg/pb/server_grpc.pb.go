// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WaypointHznClient is the client API for WaypointHzn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaypointHznClient interface {
	RegisterGuestAccount(ctx context.Context, in *RegisterGuestAccountRequest, opts ...grpc.CallOption) (*RegisterGuestAccountResponse, error)
	RegisterHostname(ctx context.Context, in *RegisterHostnameRequest, opts ...grpc.CallOption) (*RegisterHostnameResponse, error)
	ListHostnames(ctx context.Context, in *ListHostnamesRequest, opts ...grpc.CallOption) (*ListHostnamesResponse, error)
	DeleteHostname(ctx context.Context, in *DeleteHostnameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type waypointHznClient struct {
	cc grpc.ClientConnInterface
}

func NewWaypointHznClient(cc grpc.ClientConnInterface) WaypointHznClient {
	return &waypointHznClient{cc}
}

func (c *waypointHznClient) RegisterGuestAccount(ctx context.Context, in *RegisterGuestAccountRequest, opts ...grpc.CallOption) (*RegisterGuestAccountResponse, error) {
	out := new(RegisterGuestAccountResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint_hzn.WaypointHzn/RegisterGuestAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointHznClient) RegisterHostname(ctx context.Context, in *RegisterHostnameRequest, opts ...grpc.CallOption) (*RegisterHostnameResponse, error) {
	out := new(RegisterHostnameResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint_hzn.WaypointHzn/RegisterHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointHznClient) ListHostnames(ctx context.Context, in *ListHostnamesRequest, opts ...grpc.CallOption) (*ListHostnamesResponse, error) {
	out := new(ListHostnamesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint_hzn.WaypointHzn/ListHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointHznClient) DeleteHostname(ctx context.Context, in *DeleteHostnameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint_hzn.WaypointHzn/DeleteHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaypointHznServer is the server API for WaypointHzn service.
// All implementations must embed UnimplementedWaypointHznServer
// for forward compatibility
type WaypointHznServer interface {
	RegisterGuestAccount(context.Context, *RegisterGuestAccountRequest) (*RegisterGuestAccountResponse, error)
	RegisterHostname(context.Context, *RegisterHostnameRequest) (*RegisterHostnameResponse, error)
	ListHostnames(context.Context, *ListHostnamesRequest) (*ListHostnamesResponse, error)
	DeleteHostname(context.Context, *DeleteHostnameRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWaypointHznServer()
}

// UnimplementedWaypointHznServer must be embedded to have forward compatible implementations.
type UnimplementedWaypointHznServer struct {
}

func (UnimplementedWaypointHznServer) RegisterGuestAccount(context.Context, *RegisterGuestAccountRequest) (*RegisterGuestAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGuestAccount not implemented")
}
func (UnimplementedWaypointHznServer) RegisterHostname(context.Context, *RegisterHostnameRequest) (*RegisterHostnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHostname not implemented")
}
func (UnimplementedWaypointHznServer) ListHostnames(context.Context, *ListHostnamesRequest) (*ListHostnamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostnames not implemented")
}
func (UnimplementedWaypointHznServer) DeleteHostname(context.Context, *DeleteHostnameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostname not implemented")
}
func (UnimplementedWaypointHznServer) mustEmbedUnimplementedWaypointHznServer() {}

// UnsafeWaypointHznServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaypointHznServer will
// result in compilation errors.
type UnsafeWaypointHznServer interface {
	mustEmbedUnimplementedWaypointHznServer()
}

func RegisterWaypointHznServer(s grpc.ServiceRegistrar, srv WaypointHznServer) {
	s.RegisterService(&WaypointHzn_ServiceDesc, srv)
}

func _WaypointHzn_RegisterGuestAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGuestAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointHznServer).RegisterGuestAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint_hzn.WaypointHzn/RegisterGuestAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointHznServer).RegisterGuestAccount(ctx, req.(*RegisterGuestAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaypointHzn_RegisterHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointHznServer).RegisterHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint_hzn.WaypointHzn/RegisterHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointHznServer).RegisterHostname(ctx, req.(*RegisterHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaypointHzn_ListHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostnamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointHznServer).ListHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint_hzn.WaypointHzn/ListHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointHznServer).ListHostnames(ctx, req.(*ListHostnamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaypointHzn_DeleteHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointHznServer).DeleteHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint_hzn.WaypointHzn/DeleteHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointHznServer).DeleteHostname(ctx, req.(*DeleteHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WaypointHzn_ServiceDesc is the grpc.ServiceDesc for WaypointHzn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaypointHzn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint_hzn.WaypointHzn",
	HandlerType: (*WaypointHznServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGuestAccount",
			Handler:    _WaypointHzn_RegisterGuestAccount_Handler,
		},
		{
			MethodName: "RegisterHostname",
			Handler:    _WaypointHzn_RegisterHostname_Handler,
		},
		{
			MethodName: "ListHostnames",
			Handler:    _WaypointHzn_ListHostnames_Handler,
		},
		{
			MethodName: "DeleteHostname",
			Handler:    _WaypointHzn_DeleteHostname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
